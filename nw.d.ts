/*//////////////////////////////////////////////////////////////////////////////////////
//////     Autogenerated by JaySvcUtil http://JayData.org for more info        /////////
//////                      OData  V4  TypeScript                              /////////
//////////////////////////////////////////////////////////////////////////////////////*/

declare module $data{
    class Geography{}
    class GeographyLineString{}
    class GeographyPolygon{}
    class GeographyMultiPoint{}
    class GeographyMultiPolygon{}
    class GeographyMultiLineString{}
    class GeographyCollection{}

    class Geometry{}
    class GeometryLineString{}
    class GeometryPolygon{}
    class GeometryMultiPoint{}
    class GeometryMultiPolygon{}
    class GeometryMultiLineString{}
    class GeometryCollection{}
    
    const enum EntityState{
        Detached = 0,
        Unchanged = 10,
        Added = 20,
        Modified = 30,
        Deleted = 40
    }
    
    interface MemberDefinition{
        name: string;
        type: any;
        dataType: any;
        elementType: any;
        originalType: any;
        kind: string;
        classMember: boolean;
        set: (value:any) => void;
        get: () => any;
        value: any;
        initialValue: any;
        method: Function;
        enumerable: boolean;
        configurable: boolean;
        key: boolean;
        computed: boolean;
        storeOnObject: boolean;
        monitorChanges: boolean;
    }
    
    interface Event{
        attach(eventHandler: (sender: any, event: any) => void ): void;
        detach(eventHandler: () => void ): void;
        fire(e: any, sender: any): void;
    }

    class Base<T>{
        constructor();
        getType: () => typeof Base;
        
        static addProperty(name:string, getterOrType:string | Function, setterOrGetter?:Function, setter?:Function): void;
        static addMember(name:string, definition:any, isClassMember?:boolean): void;
        static describeField(name:string, definition:any): void;
        
        static hasMetadata(key:string, property?:string): boolean;
        static getAllMetadata(property?:string): any;
        static getMetadata(key:string, property?:string): any;
        static setMetadata(key:string, value:any, property?:string): void;
    }
    
    class Enum extends Base<Enum>{
        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Enum>;
    }
    function createEnum(name:string, enumType:any, enumDefinition?:any): Base<Enum>;
    
    class Entity extends Base<Entity>{
        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Entity>;
        
        entityState: EntityState;
        changedProperties: MemberDefinition[];
        
        propertyChanging: Event;
        propertyChanged: Event;
        propertyValidationError: Event;
        isValid: boolean;
    }
    
    class EntitySet<Ttype extends typeof Entity, T extends Entity> extends Queryable<T>{
        add(item: T): T;
        add(initData: {}): T;
        attach(item: T): void;
        attach(item: {}): void;
        attachOrGet(item: T): T;
        attachOrGet(item: {}): T;
        detach(item: T): void;
        detach(item: {}): void;
        remove(item: T): void;
        remove(item: {}): void;
        elementType: Ttype;
    }
    
    class EntityContext extends Base<EntityContext>{
        constructor(config?: any);
        onReady(): Promise<EntityContext>;
        saveChanges(): Promise<number>;
        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<EntityContext>;
    }

    class Queryable<T extends Entity | Edm.Primitive>{
        filter(predicate: (it: T) => boolean, thisArg?: any): Queryable<T>;
        filter(predicate: string, thisArg?: any): Queryable<T>;
        map(projection: (it: T) => any): Queryable<any>;
        map(projection: string): Queryable<any>;
        orderBy(predicate: (it: T) => void): Queryable<T>;
        orderBy(predicate: string): Queryable<T>;
        orderByDescending(predicate: (it: T) => void): Queryable<T>;
        orderByDescending(predicate: string): Queryable<T>;
        include(selector: string): Queryable<T>;
        skip(amount: number): Queryable<T>;
        take(amount: number): Queryable<T>;
        forEach(handler: (it: T) => void): Promise<T>;
        length(): Promise<number>;
        toArray(): Promise<T[]>;
        single(predicate: (it: T) => boolean, params?: any): Promise<T>;
        single(predicate: string, params?: any): Promise<T>;
        first(predicate?: (it: T) => boolean, params?: any): Promise<T>;
        first(predicate?: string, params?: any): Promise<T>;
        removeAll(): Promise<number>;
    }
    class ServiceAction{}
    class ServiceFunction{}
    
    function implementation(name:string): typeof Base;
}

declare module Edm {
    type Boolean = boolean;
    type Binary = Uint8Array;
    type DateTime = Date;
    type DateTimeOffset = Date;
    type Duration = string;
    type TimeOfDay = string;
    type Date = string;
    type Time = string;
    type Decimal = string;
    type Single = number;
    type Float = number;
    type Double = number;
    type Guid = string;
    type Int16 = number;
    type Int32 = number;
    type Int64 = string;
    type Byte = number;
    type SByte = number;
    type String = string;
    type GeographyPoint = $data.Geography;
    type GeographyLineString = $data.GeographyLineString;
    type GeographyPolygon = $data.GeographyPolygon;
    type GeographyMultiPoint = $data.GeographyMultiPoint;
    type GeographyMultiPolygon = $data.GeographyMultiPolygon;
    type GeographyMultiLineString = $data.GeographyMultiLineString;
    type GeographyCollection = $data.GeographyCollection;
    type GeometryPoint = $data.Geometry;
    type GeometryLineString = $data.GeometryLineString;
    type GeometryPolygon = $data.GeometryPolygon;
    type GeometryMultiPoint = $data.GeometryMultiPoint;
    type GeometryMultiPolygon = $data.GeometryMultiPolygon;
    type GeometryMultiLineString = $data.GeometryMultiLineString;
    type GeometryCollection = $data.GeometryCollection;
    type Primitive =
        Boolean | Binary | Guid | DateTime | DateTimeOffset | Duration | TimeOfDay | Date | Time |
        Decimal | Single | Float | Double | Int16 | Int32 | Int64 | Byte | SByte | String |
        GeographyPoint | GeographyLineString | GeographyPolygon | GeographyMultiPoint | GeographyMultiLineString | GeographyMultiPolygon | GeographyCollection |
        GeometryPoint | GeometryLineString | GeometryPolygon | GeometryMultiPoint | GeometryMultiLineString | GeometryMultiPolygon | GeometryCollection;
}

declare module NorthwindModel {

    export class Summary_of_Sales_by_Year extends $data.Entity {
        constructor();
        constructor(initData: { ShippedDate?: Edm.DateTimeOffset; OrderID?: Edm.Int32; Subtotal?: Edm.Decimal });

        ShippedDate: Edm.DateTimeOffset;
        OrderID: Edm.Int32;
        Subtotal: Edm.Decimal;
    }

    export class Summary_of_Sales_by_Quarter extends $data.Entity {
        constructor();
        constructor(initData: { ShippedDate?: Edm.DateTimeOffset; OrderID?: Edm.Int32; Subtotal?: Edm.Decimal });

        ShippedDate: Edm.DateTimeOffset;
        OrderID: Edm.Int32;
        Subtotal: Edm.Decimal;
    }

    export class Sales_Totals_by_Amount extends $data.Entity {
        constructor();
        constructor(initData: { SaleAmount?: Edm.Decimal; OrderID?: Edm.Int32; CompanyName?: Edm.String; ShippedDate?: Edm.DateTimeOffset });

        SaleAmount: Edm.Decimal;
        OrderID: Edm.Int32;
        CompanyName: Edm.String;
        ShippedDate: Edm.DateTimeOffset;
    }

    export class Sales_by_Category extends $data.Entity {
        constructor();
        constructor(initData: { CategoryID?: Edm.Int32; CategoryName?: Edm.String; ProductName?: Edm.String; ProductSales?: Edm.Decimal });

        CategoryID: Edm.Int32;
        CategoryName: Edm.String;
        ProductName: Edm.String;
        ProductSales: Edm.Decimal;
    }

    export class Products_by_Category extends $data.Entity {
        constructor();
        constructor(initData: { CategoryName?: Edm.String; ProductName?: Edm.String; QuantityPerUnit?: Edm.String; UnitsInStock?: Edm.Int16; Discontinued?: Edm.Boolean });

        CategoryName: Edm.String;
        ProductName: Edm.String;
        QuantityPerUnit: Edm.String;
        UnitsInStock: Edm.Int16;
        Discontinued: Edm.Boolean;
    }

    export class Products_Above_Average_Price extends $data.Entity {
        constructor();
        constructor(initData: { ProductName?: Edm.String; UnitPrice?: Edm.Decimal });

        ProductName: Edm.String;
        UnitPrice: Edm.Decimal;
    }

    export class Product_Sales_for_1997 extends $data.Entity {
        constructor();
        constructor(initData: { CategoryName?: Edm.String; ProductName?: Edm.String; ProductSales?: Edm.Decimal });

        CategoryName: Edm.String;
        ProductName: Edm.String;
        ProductSales: Edm.Decimal;
    }

    export class Orders_Qry extends $data.Entity {
        constructor();
        constructor(initData: { OrderID?: Edm.Int32; CustomerID?: Edm.String; EmployeeID?: Edm.Int32; OrderDate?: Edm.DateTimeOffset; RequiredDate?: Edm.DateTimeOffset; ShippedDate?: Edm.DateTimeOffset; ShipVia?: Edm.Int32; Freight?: Edm.Decimal; ShipName?: Edm.String; ShipAddress?: Edm.String; ShipCity?: Edm.String; ShipRegion?: Edm.String; ShipPostalCode?: Edm.String; ShipCountry?: Edm.String; CompanyName?: Edm.String; Address?: Edm.String; City?: Edm.String; Region?: Edm.String; PostalCode?: Edm.String; Country?: Edm.String });

        OrderID: Edm.Int32;
        CustomerID: Edm.String;
        EmployeeID: Edm.Int32;
        OrderDate: Edm.DateTimeOffset;
        RequiredDate: Edm.DateTimeOffset;
        ShippedDate: Edm.DateTimeOffset;
        ShipVia: Edm.Int32;
        Freight: Edm.Decimal;
        ShipName: Edm.String;
        ShipAddress: Edm.String;
        ShipCity: Edm.String;
        ShipRegion: Edm.String;
        ShipPostalCode: Edm.String;
        ShipCountry: Edm.String;
        CompanyName: Edm.String;
        Address: Edm.String;
        City: Edm.String;
        Region: Edm.String;
        PostalCode: Edm.String;
        Country: Edm.String;
    }

    export class Order_Subtotal extends $data.Entity {
        constructor();
        constructor(initData: { OrderID?: Edm.Int32; Subtotal?: Edm.Decimal });

        OrderID: Edm.Int32;
        Subtotal: Edm.Decimal;
    }

    export class Order_Details_Extended extends $data.Entity {
        constructor();
        constructor(initData: { OrderID?: Edm.Int32; ProductID?: Edm.Int32; ProductName?: Edm.String; UnitPrice?: Edm.Decimal; Quantity?: Edm.Int16; Discount?: Edm.Single; ExtendedPrice?: Edm.Decimal });

        OrderID: Edm.Int32;
        ProductID: Edm.Int32;
        ProductName: Edm.String;
        UnitPrice: Edm.Decimal;
        Quantity: Edm.Int16;
        Discount: Edm.Single;
        ExtendedPrice: Edm.Decimal;
    }

    export class Invoice extends $data.Entity {
        constructor();
        constructor(initData: { ShipName?: Edm.String; ShipAddress?: Edm.String; ShipCity?: Edm.String; ShipRegion?: Edm.String; ShipPostalCode?: Edm.String; ShipCountry?: Edm.String; CustomerID?: Edm.String; CustomerName?: Edm.String; Address?: Edm.String; City?: Edm.String; Region?: Edm.String; PostalCode?: Edm.String; Country?: Edm.String; Salesperson?: Edm.String; OrderID?: Edm.Int32; OrderDate?: Edm.DateTimeOffset; RequiredDate?: Edm.DateTimeOffset; ShippedDate?: Edm.DateTimeOffset; ShipperName?: Edm.String; ProductID?: Edm.Int32; ProductName?: Edm.String; UnitPrice?: Edm.Decimal; Quantity?: Edm.Int16; Discount?: Edm.Single; ExtendedPrice?: Edm.Decimal; Freight?: Edm.Decimal });

        ShipName: Edm.String;
        ShipAddress: Edm.String;
        ShipCity: Edm.String;
        ShipRegion: Edm.String;
        ShipPostalCode: Edm.String;
        ShipCountry: Edm.String;
        CustomerID: Edm.String;
        CustomerName: Edm.String;
        Address: Edm.String;
        City: Edm.String;
        Region: Edm.String;
        PostalCode: Edm.String;
        Country: Edm.String;
        Salesperson: Edm.String;
        OrderID: Edm.Int32;
        OrderDate: Edm.DateTimeOffset;
        RequiredDate: Edm.DateTimeOffset;
        ShippedDate: Edm.DateTimeOffset;
        ShipperName: Edm.String;
        ProductID: Edm.Int32;
        ProductName: Edm.String;
        UnitPrice: Edm.Decimal;
        Quantity: Edm.Int16;
        Discount: Edm.Single;
        ExtendedPrice: Edm.Decimal;
        Freight: Edm.Decimal;
    }

    export class Customer_and_Suppliers_by_City extends $data.Entity {
        constructor();
        constructor(initData: { City?: Edm.String; CompanyName?: Edm.String; ContactName?: Edm.String; Relationship?: Edm.String });

        City: Edm.String;
        CompanyName: Edm.String;
        ContactName: Edm.String;
        Relationship: Edm.String;
    }

    export class Current_Product_List extends $data.Entity {
        constructor();
        constructor(initData: { ProductID?: Edm.Int32; ProductName?: Edm.String });

        ProductID: Edm.Int32;
        ProductName: Edm.String;
    }

    export class Category_Sales_for_1997 extends $data.Entity {
        constructor();
        constructor(initData: { CategoryName?: Edm.String; CategorySales?: Edm.Decimal });

        CategoryName: Edm.String;
        CategorySales: Edm.Decimal;
    }

    export class Alphabetical_list_of_product extends $data.Entity {
        constructor();
        constructor(initData: { ProductID?: Edm.Int32; ProductName?: Edm.String; SupplierID?: Edm.Int32; CategoryID?: Edm.Int32; QuantityPerUnit?: Edm.String; UnitPrice?: Edm.Decimal; UnitsInStock?: Edm.Int16; UnitsOnOrder?: Edm.Int16; ReorderLevel?: Edm.Int16; Discontinued?: Edm.Boolean; CategoryName?: Edm.String });

        ProductID: Edm.Int32;
        ProductName: Edm.String;
        SupplierID: Edm.Int32;
        CategoryID: Edm.Int32;
        QuantityPerUnit: Edm.String;
        UnitPrice: Edm.Decimal;
        UnitsInStock: Edm.Int16;
        UnitsOnOrder: Edm.Int16;
        ReorderLevel: Edm.Int16;
        Discontinued: Edm.Boolean;
        CategoryName: Edm.String;
    }

    export class Territory extends $data.Entity {
        constructor();
        constructor(initData: { TerritoryID?: Edm.String; TerritoryDescription?: Edm.String; RegionID?: Edm.Int32; Region?: NorthwindModel.Region; Employees?: NorthwindModel.Employee[] });

        TerritoryID: Edm.String;
        TerritoryDescription: Edm.String;
        RegionID: Edm.Int32;
        Region: NorthwindModel.Region;
        Employees: NorthwindModel.Employee[];
    }

    export class Supplier extends $data.Entity {
        constructor();
        constructor(initData: { SupplierID?: Edm.Int32; CompanyName?: Edm.String; ContactName?: Edm.String; ContactTitle?: Edm.String; Address?: Edm.String; City?: Edm.String; Region?: Edm.String; PostalCode?: Edm.String; Country?: Edm.String; Phone?: Edm.String; Fax?: Edm.String; HomePage?: Edm.String; Products?: NorthwindModel.Product[] });

        SupplierID: Edm.Int32;
        CompanyName: Edm.String;
        ContactName: Edm.String;
        ContactTitle: Edm.String;
        Address: Edm.String;
        City: Edm.String;
        Region: Edm.String;
        PostalCode: Edm.String;
        Country: Edm.String;
        Phone: Edm.String;
        Fax: Edm.String;
        HomePage: Edm.String;
        Products: NorthwindModel.Product[];
    }

    export class Shipper extends $data.Entity {
        constructor();
        constructor(initData: { ShipperID?: Edm.Int32; CompanyName?: Edm.String; Phone?: Edm.String; Orders?: NorthwindModel.Order[] });

        ShipperID: Edm.Int32;
        CompanyName: Edm.String;
        Phone: Edm.String;
        Orders: NorthwindModel.Order[];
    }

    export class Region extends $data.Entity {
        constructor();
        constructor(initData: { RegionID?: Edm.Int32; RegionDescription?: Edm.String; Territories?: NorthwindModel.Territory[] });

        RegionID: Edm.Int32;
        RegionDescription: Edm.String;
        Territories: NorthwindModel.Territory[];
    }

    export class Product extends $data.Entity {
        constructor();
        constructor(initData: { ProductID?: Edm.Int32; ProductName?: Edm.String; SupplierID?: Edm.Int32; CategoryID?: Edm.Int32; QuantityPerUnit?: Edm.String; UnitPrice?: Edm.Decimal; UnitsInStock?: Edm.Int16; UnitsOnOrder?: Edm.Int16; ReorderLevel?: Edm.Int16; Discontinued?: Edm.Boolean; Category?: NorthwindModel.Category; Order_Details?: NorthwindModel.Order_Detail[]; Supplier?: NorthwindModel.Supplier });

        ProductID: Edm.Int32;
        ProductName: Edm.String;
        SupplierID: Edm.Int32;
        CategoryID: Edm.Int32;
        QuantityPerUnit: Edm.String;
        UnitPrice: Edm.Decimal;
        UnitsInStock: Edm.Int16;
        UnitsOnOrder: Edm.Int16;
        ReorderLevel: Edm.Int16;
        Discontinued: Edm.Boolean;
        Category: NorthwindModel.Category;
        Order_Details: NorthwindModel.Order_Detail[];
        Supplier: NorthwindModel.Supplier;
    }

    export class Order extends $data.Entity {
        constructor();
        constructor(initData: { OrderID?: Edm.Int32; CustomerID?: Edm.String; EmployeeID?: Edm.Int32; OrderDate?: Edm.DateTimeOffset; RequiredDate?: Edm.DateTimeOffset; ShippedDate?: Edm.DateTimeOffset; ShipVia?: Edm.Int32; Freight?: Edm.Decimal; ShipName?: Edm.String; ShipAddress?: Edm.String; ShipCity?: Edm.String; ShipRegion?: Edm.String; ShipPostalCode?: Edm.String; ShipCountry?: Edm.String; Customer?: NorthwindModel.Customer; Employee?: NorthwindModel.Employee; Order_Details?: NorthwindModel.Order_Detail[]; Shipper?: NorthwindModel.Shipper });

        OrderID: Edm.Int32;
        CustomerID: Edm.String;
        EmployeeID: Edm.Int32;
        OrderDate: Edm.DateTimeOffset;
        RequiredDate: Edm.DateTimeOffset;
        ShippedDate: Edm.DateTimeOffset;
        ShipVia: Edm.Int32;
        Freight: Edm.Decimal;
        ShipName: Edm.String;
        ShipAddress: Edm.String;
        ShipCity: Edm.String;
        ShipRegion: Edm.String;
        ShipPostalCode: Edm.String;
        ShipCountry: Edm.String;
        Customer: NorthwindModel.Customer;
        Employee: NorthwindModel.Employee;
        Order_Details: NorthwindModel.Order_Detail[];
        Shipper: NorthwindModel.Shipper;
    }

    export class Order_Detail extends $data.Entity {
        constructor();
        constructor(initData: { OrderID?: Edm.Int32; ProductID?: Edm.Int32; UnitPrice?: Edm.Decimal; Quantity?: Edm.Int16; Discount?: Edm.Single; Order?: NorthwindModel.Order; Product?: NorthwindModel.Product });

        OrderID: Edm.Int32;
        ProductID: Edm.Int32;
        UnitPrice: Edm.Decimal;
        Quantity: Edm.Int16;
        Discount: Edm.Single;
        Order: NorthwindModel.Order;
        Product: NorthwindModel.Product;
    }

    export class Employee extends $data.Entity {
        constructor();
        constructor(initData: { EmployeeID?: Edm.Int32; LastName?: Edm.String; FirstName?: Edm.String; Title?: Edm.String; TitleOfCourtesy?: Edm.String; BirthDate?: Edm.DateTimeOffset; HireDate?: Edm.DateTimeOffset; Address?: Edm.String; City?: Edm.String; Region?: Edm.String; PostalCode?: Edm.String; Country?: Edm.String; HomePhone?: Edm.String; Extension?: Edm.String; Photo?: Edm.Binary; Notes?: Edm.String; ReportsTo?: Edm.Int32; PhotoPath?: Edm.String; Employees1?: NorthwindModel.Employee[]; Employee1?: NorthwindModel.Employee; Orders?: NorthwindModel.Order[]; Territories?: NorthwindModel.Territory[] });

        EmployeeID: Edm.Int32;
        LastName: Edm.String;
        FirstName: Edm.String;
        Title: Edm.String;
        TitleOfCourtesy: Edm.String;
        BirthDate: Edm.DateTimeOffset;
        HireDate: Edm.DateTimeOffset;
        Address: Edm.String;
        City: Edm.String;
        Region: Edm.String;
        PostalCode: Edm.String;
        Country: Edm.String;
        HomePhone: Edm.String;
        Extension: Edm.String;
        Photo: Edm.Binary;
        Notes: Edm.String;
        ReportsTo: Edm.Int32;
        PhotoPath: Edm.String;
        Employees1: NorthwindModel.Employee[];
        Employee1: NorthwindModel.Employee;
        Orders: NorthwindModel.Order[];
        Territories: NorthwindModel.Territory[];
    }

    export class Customer extends $data.Entity {
        constructor();
        constructor(initData: { CustomerID?: Edm.String; CompanyName?: Edm.String; ContactName?: Edm.String; ContactTitle?: Edm.String; Address?: Edm.String; City?: Edm.String; Region?: Edm.String; PostalCode?: Edm.String; Country?: Edm.String; Phone?: Edm.String; Fax?: Edm.String; Orders?: NorthwindModel.Order[]; CustomerDemographics?: NorthwindModel.CustomerDemographic[] });

        CustomerID: Edm.String;
        CompanyName: Edm.String;
        ContactName: Edm.String;
        ContactTitle: Edm.String;
        Address: Edm.String;
        City: Edm.String;
        Region: Edm.String;
        PostalCode: Edm.String;
        Country: Edm.String;
        Phone: Edm.String;
        Fax: Edm.String;
        Orders: NorthwindModel.Order[];
        CustomerDemographics: NorthwindModel.CustomerDemographic[];
    }

    export class CustomerDemographic extends $data.Entity {
        constructor();
        constructor(initData: { CustomerTypeID?: Edm.String; CustomerDesc?: Edm.String; Customers?: NorthwindModel.Customer[] });

        CustomerTypeID: Edm.String;
        CustomerDesc: Edm.String;
        Customers: NorthwindModel.Customer[];
    }

    export class Category extends $data.Entity {
        constructor();
        constructor(initData: { CategoryID?: Edm.Int32; CategoryName?: Edm.String; Description?: Edm.String; Picture?: Edm.Binary; Products?: NorthwindModel.Product[] });

        CategoryID: Edm.Int32;
        CategoryName: Edm.String;
        Description: Edm.String;
        Picture: Edm.Binary;
        Products: NorthwindModel.Product[];
    }

}

declare module ODataWebExperimental.Northwind.Model {

    export class NorthwindEntities extends $data.EntityContext {
        onReady(): Promise<NorthwindEntities>;

        Categories: $data.EntitySet<typeof NorthwindModel.Category, NorthwindModel.Category>;
        CustomerDemographics: $data.EntitySet<typeof NorthwindModel.CustomerDemographic, NorthwindModel.CustomerDemographic>;
        Customers: $data.EntitySet<typeof NorthwindModel.Customer, NorthwindModel.Customer>;
        Employees: $data.EntitySet<typeof NorthwindModel.Employee, NorthwindModel.Employee>;
        Order_Details: $data.EntitySet<typeof NorthwindModel.Order_Detail, NorthwindModel.Order_Detail>;
        Orders: $data.EntitySet<typeof NorthwindModel.Order, NorthwindModel.Order>;
        Products: $data.EntitySet<typeof NorthwindModel.Product, NorthwindModel.Product>;
        Regions: $data.EntitySet<typeof NorthwindModel.Region, NorthwindModel.Region>;
        Shippers: $data.EntitySet<typeof NorthwindModel.Shipper, NorthwindModel.Shipper>;
        Suppliers: $data.EntitySet<typeof NorthwindModel.Supplier, NorthwindModel.Supplier>;
        Territories: $data.EntitySet<typeof NorthwindModel.Territory, NorthwindModel.Territory>;
        Alphabetical_list_of_products: $data.EntitySet<typeof NorthwindModel.Alphabetical_list_of_product, NorthwindModel.Alphabetical_list_of_product>;
        Category_Sales_for_1997: $data.EntitySet<typeof NorthwindModel.Category_Sales_for_1997, NorthwindModel.Category_Sales_for_1997>;
        Current_Product_Lists: $data.EntitySet<typeof NorthwindModel.Current_Product_List, NorthwindModel.Current_Product_List>;
        Customer_and_Suppliers_by_Cities: $data.EntitySet<typeof NorthwindModel.Customer_and_Suppliers_by_City, NorthwindModel.Customer_and_Suppliers_by_City>;
        Invoices: $data.EntitySet<typeof NorthwindModel.Invoice, NorthwindModel.Invoice>;
        Order_Details_Extendeds: $data.EntitySet<typeof NorthwindModel.Order_Details_Extended, NorthwindModel.Order_Details_Extended>;
        Order_Subtotals: $data.EntitySet<typeof NorthwindModel.Order_Subtotal, NorthwindModel.Order_Subtotal>;
        Orders_Qries: $data.EntitySet<typeof NorthwindModel.Orders_Qry, NorthwindModel.Orders_Qry>;
        Product_Sales_for_1997: $data.EntitySet<typeof NorthwindModel.Product_Sales_for_1997, NorthwindModel.Product_Sales_for_1997>;
        Products_Above_Average_Prices: $data.EntitySet<typeof NorthwindModel.Products_Above_Average_Price, NorthwindModel.Products_Above_Average_Price>;
        Products_by_Categories: $data.EntitySet<typeof NorthwindModel.Products_by_Category, NorthwindModel.Products_by_Category>;
        Sales_by_Categories: $data.EntitySet<typeof NorthwindModel.Sales_by_Category, NorthwindModel.Sales_by_Category>;
        Sales_Totals_by_Amounts: $data.EntitySet<typeof NorthwindModel.Sales_Totals_by_Amount, NorthwindModel.Sales_Totals_by_Amount>;
        Summary_of_Sales_by_Quarters: $data.EntitySet<typeof NorthwindModel.Summary_of_Sales_by_Quarter, NorthwindModel.Summary_of_Sales_by_Quarter>;
        Summary_of_Sales_by_Years: $data.EntitySet<typeof NorthwindModel.Summary_of_Sales_by_Year, NorthwindModel.Summary_of_Sales_by_Year>;
    }

}

export var type: typeof ODataWebExperimental.Northwind.Model.NorthwindEntities;
export var factory: (config:any) => ODataWebExperimental.Northwind.Model.NorthwindEntities;